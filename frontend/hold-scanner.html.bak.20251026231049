<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Hold Type Scanner</title>
  <style>
    body{font-family:sans-serif;padding:24px;background:#fafafa}
    #counts{display:flex;gap:12px}
    .countBox{padding:8px;border:1px solid #ddd;border-radius:6px}
    #winnerBanner{margin-top:12px;padding:10px;background:#e6ffe6;display:none}
  </style>
</head>
<body>
  <h1>Hold Type Scanner</h1>
  <div id="counts">
    <div class="countBox">G: <span id="gcount" data-test-id="gcount">0</span></div>
    <div class="countBox">W: <span id="wcount" data-test-id="wcount">0</span></div>
    <div class="countBox">F: <span id="fcount" data-test-id="fcount">0</span></div>
  </div>
  <div id="winnerBanner" data-test-id="hold-winner">WINNER: <span id="winnerText"></span></div>

  <script>
    async function fetchHoldState() {
      try {
        // If your API exposes hold summary, call it; else this will be polite no-op
        const r = await fetch('/api/hold/state');
        if (!r.ok) return null;
        return await r.json();
      } catch (e) { return null; }
    }

    async function updateCounts() {
      // fallback: call /api/hold if available; otherwise use /api/scene/state to detect progress as example
      const s = await fetchHoldState();
      if (s && s.counts) {
        document.getElementById('gcount').textContent = s.counts.g || 0;
        document.getElementById('wcount').textContent = s.counts.w || 0;
        document.getElementById('fcount').textContent = s.counts.f || 0;
        if (s.winner) {
          document.getElementById('winnerText').textContent = s.winner;
          document.getElementById('winnerBanner').style.display = 'block';
        }
        return;
      }
      // graceful fallback: query a generic endpoint that tests may use (the backend catchall returns OK)
      try {
        const r2 = await fetch('/api/hold/status');
        if (!r2.ok) return;
        const j = await r2.json();
        if (j && j.counts) {
          document.getElementById('gcount').textContent = j.counts.g || 0;
          document.getElementById('wcount').textContent = j.counts.w || 0;
          document.getElementById('fcount').textContent = j.counts.f || 0;
        }
      } catch(e){}
    }

    (async () => {
      await updateCounts();
      setInterval(updateCounts, 700);
    })();

    // CI test helper: reveal winner banner via ?showWinner=1
    (function(){
      try {
        const params = new URLSearchParams(location.search);
        if (params.get('showWinner') === '1') {
          const banner = document.getElementById('winnerBanner');
          const text = document.getElementById('winnerText');
          if (banner && text) {
            text.textContent = params.get('winner') || 'TEAM PREDICTS';
            banner.style.display = 'block';
          }
        }
      } catch(e) {
        console.error('Test helper error:', e);
      }
    })();
  </script>
</body>
</html>